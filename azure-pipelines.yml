####################################################################
# VSTS Build Configuration, Version 1.4
#
# (c)2022 superdev GmbH
####################################################################

name: $[format('{0}', variables['buildName'])]

pool:
  vmImage: 'windows-2022'

trigger:
  branches:
    include:
    - master
    - develop
    - feature/*
    - bugfix/*

  paths:
    exclude:
    - Docs/*

variables:
  solution: 'Superdev.Editorconfig.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  majorVersion: 1
  minorVersion: 0
  patchVersion: $[counter(format('{0}.{1}', variables.majorVersion, variables.minorVersion), 0)]
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    # Versioning: 1.0.0
    semVersion: $[format('{0}.{1}.{2}', variables.majorVersion, variables.minorVersion, variables.patchVersion)]
  ${{ if and(ne(variables['Build.SourceBranch'], 'refs/heads/master'), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/'))) }}:
    # Versioning: 1.0.0-pre
    semVersion: $[format('{0}.{1}.{2}-pre', variables.majorVersion, variables.minorVersion, variables.patchVersion)]
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/pull/') }}:
    # Versioning: 1.0.0-pr.000000001
    semVersion: $[format('{0}.{1}.{2}-pr.{3}', variables.majorVersion, variables.minorVersion, variables.patchVersion, variables['System.PullRequest.PullRequestId'])]
  buildName: $[format('{0}', variables.semVersion)]

steps:
- task: Bash@3
  displayName: 'Print all variables'
  inputs:
    targetType: 'inline'
    script: 'env | sort'
   
- task: Assembly-Info-NetCore@2
  displayName: 'Update Assembly Info'
  inputs:
    Path: '$(Build.SourcesDirectory)'
    FileNames: |
      *.csproj
      **/*.csproj
    InsertAttributes: true
    FileEncoding: 'auto'
    WriteBOM: false
    Product: 'Superdev.Editorconfig'
    Description: ''
    Company: 'superdev GmbH'
    Copyright: '(c) $(date:YYYY) superdev GmbH'
    VersionNumber: '$(Build.BuildNumber)'
    FileVersionNumber: '$(Build.BuildNumber)'
    InformationalVersion: '$(Build.BuildNumber)'
    PackageVersion: '$(Build.BuildNumber)'
    LogLevel: 'verbose'
    FailOnWarning: false
    DisableTelemetry: false'

- task: NuGetToolInstaller@0
  displayName: 'Use NuGet 6.x'
  inputs:
    versionSpec: 6.x

- task: DotNetCoreCLI@2
  displayName: 'NuGet restore'
  inputs:
    command: restore
    projects: '$(solution)'

- task: DotNetCoreCLI@2
  displayName: 'Build solution'
  inputs:
    projects: '$(solution)'
    arguments: '--no-restore --configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Pack Superdev.Editorconfig'
  inputs:
    command: pack
    packagesToPack: Superdev.Editorconfig.csproj
    versioningScheme: byEnvVar
    versionEnvVar: semVersion

- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: |
     **\bin\$(BuildConfiguration)\**
     **\bin\*.nupkg
     **\bin\*.snupkg
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
     
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
